module test

struct list
    next
    val
    ## These are here just to take up space.
    a
    b
    c
    d
    e
    f
    g
    h
    i
    j
    k
    l
    m
    n
    o
    p
    q
    r
    s
    t
    u
    v
    w
    x
    y
    z
endstruct

struct foo
    bar
    baz
    boo
endstruct


export start

fail:
    mov R12 0xBAD
    dumpreg R12
    exit

start:
    dumpreg IP
## Integer comparison
    mov R1 $10
    cmp R1 $10

    mov R11 $1
    jl fail
    mov R11 $2
    jg fail
    mov R11 $3
    jne fail

    mov R1 $10
    cmp R1 $11

    mov R11 $4
    jge fail
    mov R11 $5
    je fail

    cmp R1 $9

    mov R11 $6
    jle fail


    mov R12 0x600D

## Test allocation and GC with a big linked list
bigloop:
    mov R0 $0
    new R1 list
    mov R1(list.val) $0
    mov R1(list.next) $0
loop:

    new R2 list
    mov R2(list.val) R0
    mov R2(list.next) R1
    mov R1 R2

    inc R0
    cmp R0 $10000000
    jne loop


loop2:
    mov R2 R1(list.val)
    #dumpreg R2

    mov R1 R1(list.next)
    cmp R1 $0
    jne loop2

## Go around a few times, just to check the heap is reused (stuff is getting freed.
    dumpreg R3
    cmp R3 0x3
    add R3 $1
    jne bigloop


## Count to 0xFEEDBACC
    mov R1 $0
feedbacc:
    add R1 $127
    cmp R1 0xFEEDBACC
    jne feedbacc

    dumpreg R1

## Basic moves on objects
    new R7 foo

    mov R7(foo.bar) $10
    mov R7(foo.boo) $11
    mov R8 R7(foo.bar)
    mov R9 R7(foo.boo)

    mov R10 $-10
    add R10 $20

    exit
